#!/usr/bin/env node

'use strict';

const kit = require('needle-kit');
const co = require('co');
const lib = require('../lib');
const cheerio = require('cheerio');
const path = require('path');
const fs = kit.fs;
const map = require('promise.map');
const pkgVersion = require('../package.json').version;
const debug = require('debug')('yun:cli');
const argv = require('minimist')(process.argv.slice(2), {
  boolean: ['skip'],
  alias: {
    h: 'help',
    c: 'concurrency',
    f: 'format',
    q: 'quality',
    t: 'timeout',
    s: 'skip'
  },
  default: {
    concurrency: 5,
    format: ':name/:singer - :songName.:ext',
    quality: 128,
    timeout: 3, // 3 mins
    'max-times': 3, // 3 times
    skip: true
  }
});

if (argv._.length === 0 || argv.help) {
  console.log(
    `
  网易云音乐 歌单/专辑 下载器 v${ pkgVersion }

  使用:
    yun [选项] <地址>

  选项:
    -h,--help         查看此帮助信息
    -c,--concurrency  设置同时下载数量, 默认5
    -f,--format       设置文件格式, 默认 ':name/:singer - :songName.:ext'
    -q,--quality      设置音质, 可选值为 128,192,320(kbits/s), 默认128
    -t,--timeout      设置下载超时, 单位为分, 默认3分钟
    --max-times       设置下载重试次数, 需要与timeout搭配使用, 默认3次
    -s,--skip         设置对于已存在文件且大于1MB, 则跳过, 默认启用

  帮助 & 文档:
    https://github.com/magicdawn/yun-playlist-downloader

  示例:
    # 10首同时下载
    yun -c 10 http://music.163.com/#/playlist?id=12583200

    # 下载格式为 '歌手 - 歌名'
    yun -f ':singer - :songName.:ext' http://music.163.com/#/playlist?id=12583200
  `
  );
  process.exit(1);
}

// url
let url = argv._[0];

// concurrency
const concurrency = argv.concurrency;

// format
const format = argv.format;

// quality
let quality = argv.quality;
const qualityRegistry = [128, 192, 320];
if (!~qualityRegistry.indexOf(quality)) {
  console.log(`
  quality参数可选值为 ${ JSON.stringify(qualityRegistry) }
  `);
  process.exit(1);
}
quality = quality * 1000;

// timeout & maxTimes
const timeout = argv.timeout * 60 * 1000; // ms
const maxTimes = argv['max-times'];

// 是否跳过已存在
const skipExists = argv.skip;

co(function * () {
  url = lib.normalizeUrl(url);
  const html = yield lib.getHtml(url);
  const $ = cheerio.load(html, {
    decodeEntities: false
  });

  // 基本信息
  const name = lib.getTitle($, url);
  const songs = yield lib.getSongs($, url, quality);
  debug('songs : %j', songs);
  const start = Date.now();
  console.log(`正在下载『${ name }』,请稍候...`);

  // FIXME
  // process.exit();

  // 开始下载
  yield map(songs, song => {
    // 根据格式获取所需文件名
    const filename = lib.getFileName({
      format: format,
      song: song,
      url: url,
      name: name
    });
    // return console.log(filename);

    // 下载
    return lib.tryDownloadSong(
      song.url, filename, song, songs.length,
      timeout, maxTimes, skipExists
    );
  }, concurrency);

  console.log('下载完成,耗时%s秒', (Date.now() - start) / 1000);
}).catch(e => console.error(e.stack || e));